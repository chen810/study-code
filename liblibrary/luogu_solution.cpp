//
// Created by WOOO on 2020/12/7.
//

#include "luogu_solution.h"

// P1830 轰炸III
/* 题目背景
 * 一个大小为N*M的城市遭到了X次轰炸，每次都炸了一个每条边都与边界平行的矩形
 * 题目描述：在轰炸后，有Y个关键点，指挥官想知道，它们有没有受到过轰炸，如果有，被炸了几次，最后一次是第几轮
 * 输入格式：第一行，四个整数：n、m、x、y,以下x行，每行四个整数：x1、y1、x1、y1 (原点在左上角)
 * 表示被轰炸的矩形的左上角坐标(x1,y1)和右下角坐标(x2,y2)
 * 再以下y行，每行两个整数，表示这个关键点的坐标
 * 输出格式:共y行,每行第一个字符为Y或N，表示是否被轰炸
 * 若为Y，在一个空格后为两个整数，表示被炸了几次和最后一次是第几轮
 * 说明/提示(数据规模)
 * 1<=N,M<=100
 * */
[[maybe_unused]] void Luogu_solution::Luogu_P1830() {
    //===========开始录入数据=======================
    int n, m, x, y;
    cin >> n >> m >> x >> y;
    vector<vector<int>> bombs(static_cast<unsigned long long int>(x), vector<int>(4));
    vector<vector<int>> strongholds(static_cast<unsigned long long int>(y), vector<int>(2));
    vector<vector<int>> res(static_cast<unsigned long long int>(y), vector<int>(2, 0));
    for (int i = 0; i < x; ++i) cin >> bombs[i][0] >> bombs[i][1] >> bombs[i][2] >> bombs[i][3];
    for (int i = 0; i < y; ++i) cin >> strongholds[i][0] >> strongholds[i][1];
    //===========录入数据结束=======================
    for (int i = 0; i < x; ++i) { // 扔炸弹模拟
        auto bomb = bombs[i];   // 取出炸弹
        for (int j = 0; j < y; ++j) {   // 判断每个点是否在范围内
            auto point = strongholds[j];
            // (0,0)点在左上角
            if ((point[0] >= bomb[0]) &&
                (point[0] <= bomb[2]) &&
                (point[1] <= bomb[3]) &&
                (point[1] >= bomb[1])) {
                res[j][0]++;    // 次数+1
                res[j][1] = i + 1;  // 记录最后一次的编号,起始为1
            }
        }
    }
    //===========打印计算结果=======================
    for (auto &r : res) {
        if (r[0] > 0) {
            cout << "Y " << r[0] << ' ' << r[1] << "\n";
        } else {
            cout << "N\n";
        }
    }
    //===========打印结果完成=======================
}

// P2006 赵神牛的游戏
/* 题目描述:赵神牛一共有k点法力值,一共有m个技能,每个技能耗费的法力值为ai,可以造成的伤害为bi
 * 而 boss的体力值为n,请你求出它放哪个技能,才可以打死 boss
 * 他一局只放一个技能,不过每个技能都可以放无数次
 * 输入格式:第一行有三个整数，分别表示 k,m,n
 * 后面m行,每行两个整数,第(i+1)行的整数表示耗费的法力值ai和造成的伤害bi
 * 输出格式:输出仅一行，既可以杀死boss的技能序号，如果有多个，按从小到大的顺序输出
 * 中间用一个空格隔开；如果没有技能能杀死 boss，输出 -1
 * 数据规模与约定:
 * 0<= n,m,k <=3×10^4
 * 1<= ai,bi <=2147483647。
 * */
[[maybe_unused]] void Luogu_solution::Luogu_P2006() {
    //===========开始录入数据=======================
    int k, m, n;
    cin >> k >> m >> n;
    vector<vector<int>> info(static_cast<unsigned long long int>(m), vector<int>(2));
    for (int i = 0; i < m; ++i) cin >> info[i][0] >> info[i][1];
    //===========录入数据结束=======================
    vector<int> res;
    for (int i = 0; i < m; ++i) {
        if (info[i][0] == 0 || info[i][0] <= k && k * info[i][1] >= n * info[i][0]) res.push_back(i + 1);
    }
    //===========打印计算结果=======================
    if (res.empty()) {
        cout << -1;
    } else {
        for (auto &r : res) cout << r << " ";
    }
    //===========打印结果完成=======================
}

// P2084 进制转换
/* 题目描述:进制转换，比如10101 2,那么它的十进制表示的式子就是:1*2^4+0*2^3+1*2^2+0*2^1+1*2^0
 * 那么请你编程实现，将一个M进制的数N转换成十进制表示的式子。
 * 注意：当系数为0时，该单项式要省略
 * 输入格式:两个数，M和N，中间用空格隔
 * 输出格式:共一行，一个十进制表示的式子
 * */
[[maybe_unused]] void Luogu_solution::Luogu_P2084() {
    //===========开始录入数据=======================
    string M, N;
    cin >> M >> N;
    // cout << M << " " <<N << "\n";
    //===========录入数据结束=======================
    string res;
    int n = static_cast<int>(N.size());
    bool flag = false;
    for (int i = 0; i < N.size(); ++i) {
        if (N[i] != '0') {
            if (flag) res += "+";
            res += N[i];
            res += "*" + M + "^" + to_string(n - 1 - i);
            flag = true;
        }
    }
    //===========打印计算结果=======================
    cout << res;
    //===========打印结果完成=======================
}

// P5710 【深基3.例2】数的性质
/* 题目描述：一些数字可能拥有以下的性质
 * 性质 1：是偶数
 * 性质 2：大于 4 且不大于 12
 * 小A 喜欢这两个性质同时成立的数字
 * Uim 喜欢这至少符合其中一种性质的数字
 * 八尾勇喜欢刚好有符合其中一个性质的数字
 * 正妹喜欢不符合这两个性质的数字
 * 输入格式：输入一个数字x
 * 输出格式：输出这4个人是否喜欢这个数字，如果喜欢则输出1，否则输出0，用空格分隔
 * 数据规模：0<= x <=1000
 * */
[[maybe_unused]] void Luogu_solution::Luogu_5710() {
    //===========开始录入数据=======================
    int x;
    cin >> x;
    //===========录入数据结束=======================
    bool p1 = !(x & 0x1);
    bool p2 = x > 4 && x <= 12;
    //===========打印计算结果=======================
    cout << (p1 && p2) << " " << (p1 || p2) << " " << (p1 != p2) << " " << (!(p1 || p2)) << " ";
    //===========打印结果完成=======================
}


//===========开始录入数据=======================
//===========录入数据结束=======================
//===========打印计算结果=======================
//===========打印结果完成=======================